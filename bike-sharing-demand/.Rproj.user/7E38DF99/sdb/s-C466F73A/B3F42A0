{
    "contents" : "#\n# TITANIC R TUTORIAL\n#\n\n# Setting working directory\n#setwd(\"~/Dropbox/Novabase/Analytics Lab/Use Cases/Titanic\")\n\n# Loading training and test datasets\ntrain <- read.csv(\"~/Dropbox/Novabase/Analytics Lab/Use Cases/Titanic/train.csv\")\ntest <- read.csv(\"~/Dropbox/Novabase/Analytics Lab/Use Cases/Titanic/test.csv\")\n\n# Proportion of people that survived\ntable(train$Survived)\nprop.table(table(train$Survived))\n\n# Add new Survived column with value 0 for each test record (everyone dies)\ntest$Survived <- rep(0, 418)\n\n\n# Extract passenger ID and Survived columns from test and save into a CSV\nsubmit <- data.frame(PassengerId = test$PassengerId, Survived = test$Survived)\nwrite.csv(submit, file = \"theyallperish.csv\", row.names = FALSE)\n\n# Get the summary of Sex variable\nsummary(train$Sex)\n\nprop.table(table(train$Sex, train$Survived))\n# Women survive most!\nprop.table(table(train$Sex, train$Survived),1)\n\n# Hammer time: females survive, males do not\ntest$Survived <- 0\ntest$Survived[test$Sex == 'female'] <- 1\n\n# Get the summary of Age variable\nsummary(train$Age)\n\n# Create Child variable which is 1 when passenger is younger than 28 yrs\ntrain$Child <- 0\ntrain$Child[train$Age < 18] <- 1\n\n# How many survived given the Sex and if it's a Child\naggregate(Survived ~ Child + Sex, data=train, FUN=sum)\n# Total number of people given the Sex and Child\naggregate(Survived ~ Child + Sex, data=train, FUN=length)\n# Proportion of survivoer give then Sex andChild\naggregate(Survived ~ Child + Sex, data=train, FUN=function(x) {sum(x)/length(x)})\n\n# Create new column Fare2 with fare categories\ntrain$Fare2 <- '30+'\ntrain$Fare2[train$Fare < 30 & train$Fare >= 20] <- '20-30'\ntrain$Fare2[train$Fare < 20 & train$Fare >= 10] <- '10-20'\ntrain$Fare2[train$Fare < 10] <- '<10'\n\n# See survival rate considering Fare, social class and sex\naggregate(Survived ~ Fare2 + Pclass + Sex, data=train, FUN=function(x) {sum(x)/length(x)})\n\n# Readjust prediction\ntest$Survived <- 0\ntest$Survived[test$Sex == 'female'] <- 1\ntest$Survived[test$Sex == 'female' & test$Pclass == 3 & test$Fare >= 20] <- 0\n\n\n# Extract passenger ID and Survived columns from test and save into a CSV\nsubmit <- data.frame(PassengerId = test$PassengerId, Survived = test$Survived)\nwrite.csv(submit, file = \"predictions.csv\", row.names = FALSE)\n\n#\n# Decision Trees!\n#\n\n# Load lib\nlibrary(rpart)\n# Run decision tree alg!!!\nfit <- rpart(Survived ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked, data=train, method=\"class\")\n\nplot(fit)\ntext(fit)\n\n#install.packages('rattle')\n#install.packages('rpart.plot')\n#install.packages('RColorBrewer')\nlibrary(rattle)\nlibrary(rpart.plot)\nlibrary(RColorBrewer)\nfancyRpartPlot(fit)\n\n#Predict and save file\nPrediction <- predict(fit, test, type = \"class\")\nsubmit <- data.frame(PassengerId = test$PassengerId, Survived = Prediction)\nwrite.csv(submit, file = \"myfirstdtree.csv\", row.names = FALSE)\n\n# Unleash complexity AND 2 passengers at least for splitting the bucket\nfit <- rpart(Survived ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked, data=train,\n             method=\"class\", control=rpart.control(minsplit=2, cp=0))\nfancyRpartPlot(fit)\n\n#Predict and save file\nPrediction <- predict(fit, test, type = \"class\")\nsubmit <- data.frame(PassengerId = test$PassengerId, Survived = Prediction)\nwrite.csv(submit, file = \"myfirstdtree.csv\", row.names = FALSE)\n\n# Trim the tree\nnew.fit <- prp(fit,snip=TRUE)$obj\n\n#Predict and save file\nPrediction <- predict(new.fit, test, type = \"class\")\nsubmit <- data.frame(PassengerId = test$PassengerId, Survived = Prediction)\nwrite.csv(submit, file = \"myfirstdtree.csv\", row.names = FALSE)\n\n#\n# FEATURE ENGINEERING\n#\n\n# First passenger's names\ntrain$Name[1]\n\n#Extract the titles from name\n# 1 - Merge both datasets (test set needs more variables)\ntest$Survived <- NA\ntest$Child <- 0\ntest$Child[test$Age < 18] <- 1\ntest$Fare2 <- '30+'\ntest$Fare2[test$Fare < 30 & test$Fare >= 20] <- '20-30'\ntest$Fare2[test$Fare < 20 & test$Fare >= 10] <- '10-20'\ntest$Fare2[test$Fare < 10] <- '<10'\n#  MERGE\ncombi <- rbind(train, test)\n# 2 - Convert names from factors to strings\ncombi$Name <- as.character(combi$Name)\ncombi$Name[1]\n# 3 - Split name parts\nstrsplit(combi$Name[1], split='[,.]')\nstrsplit(combi$Name[1], split='[,.]')[[1]]\nstrsplit(combi$Name[1], split='[,.]')[[1]][2] # always Mr\n# Apply split function to every row - column Title\ncombi$Title <- sapply(combi$Name, FUN=function(x) {strsplit(x, split='[,.]')[[1]][2]})\ncombi$Title <- sub(' ', '', combi$Title) #trim spaces\n\ntable(combi$Title)\n\n#Combine madam and mademoiselle\ncombi$Title[combi$Title %in% c('Mme', 'Mlle')] <- 'Mlle'\n\n#Rich guys\ncombi$Title[combi$Title %in% c('Capt', 'Don', 'Major', 'Sir')] <- 'Sir'\ncombi$Title[combi$Title %in% c('Dona', 'Lady', 'the Countess', 'Jonkheer')] <- 'Lady'\n\n#Change Title back to factor\ncombi$Title <- factor(combi$Title)\n\n# New variable - family size\ncombi$FamilySize <- combi$SibSp + combi$Parch + 1\n\n#Extract surname\ncombi$Surname <- sapply(combi$Name, FUN=function(x) {strsplit(x, split='[,.]')[[1]][1]})\n\n# Bluid familiy ID: size+surname\ncombi$FamilyID <- paste(as.character(combi$FamilySize), combi$Surname, sep=\"\")\n# small families\ncombi$FamilyID[combi$FamilySize <= 2] <- 'Small'\n\ntable(combi$FamilyID)\n\n# Table of famIDs and their frequency\nfamIDs <- data.frame(table(combi$FamilyID))\n# obtain families with lower freq\nfamIDs <- famIDs[famIDs$Freq <= 2,]\n# Classify those families as \"small\"\ncombi$FamilyID[combi$FamilyID %in% famIDs$Var1] <- 'Small'\n# Back to factor\ncombi$FamilyID <- factor(combi$FamilyID)\n\n# Finally break train and test set apart\ntrain <- combi[1:891,]\ntest <- combi[892:1309,]\n\n# Tun decision tree with newly added variables!\nfit <- rpart(Survived ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked + Title + FamilySize + FamilyID,\n             data=train, method=\"class\")\nfancyRpartPlot(fit)\n\n#Predict and save file\nPrediction <- predict(new.fit, test, type = \"class\")\nsubmit <- data.frame(PassengerId = test$PassengerId, Survived = Prediction)\nwrite.csv(submit, file = \"predictions.csv\", row.names = FALSE)\n\n#\n# RANDOM FORESTS\n#\n\nsample(1:10, replace = TRUE)\n\nsummary(combi$Age)\n\n# Try to predict the sge'd missing values based on other variables\nAgefit <- rpart(Age ~ Pclass + Sex + SibSp + Parch + Fare + Embarked + Title + FamilySize,\n                data=combi[!is.na(combi$Age),], method=\"anova\")\n# Fill the NAs with the predicted age\ncombi$Age[is.na(combi$Age)] <- predict(Agefit, combi[is.na(combi$Age),])\nfancyRpartPlot(Agefit)\n\nsummary(combi$Age)\nsummary(combi)\n\nsummary(combi$Embarked)\n\n# there are 2 persons without embark, 62 and 830\nwhich(combi$Embarked == '')\n\n# Replace them with Southampton (the majority) and back to factor\ncombi$Embarked[c(62,830)] = \"S\"\ncombi$Embarked <- factor(combi$Embarked)\n\n# Fare with 1 NA\nsummary(combi$Fare)\nwhich(is.na(combi$Fare)) # 1044\n# Set NA's Fare as the median\ncombi$Fare[1044] <- median(combi$Fare, na.rm=TRUE)\n\n# Too many factor levels for FamilyID (suuports up to 32 diferent familyIDs)\n# Got to increase cutt-off to be a \"Small\" family from 2 to 3 people\ncombi$FamilyID2 <- combi$FamilyID\ncombi$FamilyID2 <- as.character(combi$FamilyID2)\ncombi$FamilyID2[combi$FamilySize <= 3] <- 'Small'\ncombi$FamilyID2 <- factor(combi$FamilyID2) # 22 levels\n\ntrain<-combi[1:891,]\ntest<-combi[892:1309,]\n\n# Random forest algorithm - install and load\ninstall.packages('randomForest')\nlibrary(randomForest)\n\n#setting the seed\nset.seed(415)\n\n# 2000 random trees\nfit <- randomForest(as.factor(Survived) ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked + Title +\n                    FamilySize + FamilyID2, data=train, importance=TRUE, ntree=2000)\n\nvarImpPlot(fit)\n\nPrediction <- predict(fit, test)\nsubmit <- data.frame(PassengerId = test$PassengerId, Survived = Prediction)\nwrite.csv(submit, file = \"firstforest.csv\", row.names = FALSE)\n\n# Random forest of conditional inference trees\ninstall.packages('party')\nlibrary(party)\n\n\nset.seed(415)\nfit <- cforest(as.factor(Survived) ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked + Title + FamilySize + FamilyID,\n               data = train, controls=cforest_unbiased(ntree=2000, mtry=3))\n\n\n",
    "created" : 1407958491607.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2626445418",
    "id" : "B3F42A0",
    "lastKnownWriteTime" : 1406702778,
    "path" : "D:/NB19342/Dropbox/Novabase/Analytics Lab/Use Cases/Titanic/Titanic.R",
    "project_path" : null,
    "properties" : {
    },
    "source_on_save" : false,
    "type" : "r_source"
}