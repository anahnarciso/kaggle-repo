{
    "contents" : "# Kaggle's\n# BIKE SHARING DEMAND\n# R implementation by Ana Narciso\n\n# Setting working directory\nsetwd(\"C:/git/kaggle-repo/bike-sharing-demand\")\n\nrequire(lattice) \nlibrary(lattice) \nlibrary(rattle)\nlibrary(rpart.plot)\nlibrary(RColorBrewer)\n\n# Loading training and test datasets\ntrain <- read.csv(\"train.csv\")\ntest <- read.csv(\"test.csv\")\n\n# Get the train set structure and summary\nstr(train)\nsummary(train)\n\n# No NA's\ntable(complete.cases(train))\n\n\n#\n# Feature Engineering\n#\n\n\n\n# Add dummy values to test dataframe\ntest$casual = NA\ntest$registered = NA\ntest$count = NA\n\n# Bind train and test data together - for applying the same set of operations\ncombi = rbind(train, test)\n\n# Convert some features to factors\ncombi$season = as.factor(combi$season)\ncombi$holiday = as.factor(combi$holiday)\ncombi$workingday = as.factor(combi$workingday)\ncombi$weather = as.factor(combi$weather)\n\n# Extract hour, weekday, month, and year from datetime\ncombi$datetime2 = strptime(as.character(combi$datetime), format=\"%Y-%m-%d %H:%M:%S\")\n##combi$datetime = strptime(as.character(combi$datetime), format=\"%Y-%m-%d %H:%M:%S\")\ncombi$weekday = as.factor(combi$datetime2$wday)\ncombi$month = as.factor(combi$datetime2$mon)\ncombi$hour = as.factor(combi$datetime2$hour)\ncombi$year = as.factor(1900 + combi$datetime2$year)\n\n# Build categories for continuous variables\n\ncombi$temp_cat = '40+'\ncombi$temp_cat[combi$temp < 40 & combi$temp >= 30] = '30-40'\ncombi$temp_cat[combi$temp < 30 & combi$temp >= 20] = '20-30'\ncombi$temp_cat[combi$temp < 20 & combi$temp >= 10] = '10-20'\ncombi$temp_cat[combi$temp < 10] = '10-'\n\ncombi$wind_cat = '50+'\ncombi$wind_cat[combi$windspeed < 50 & combi$windspeed >= 45] = '45-50'\ncombi$wind_cat[combi$windspeed < 45 & combi$windspeed >= 30] = '30-45'\ncombi$wind_cat[combi$windspeed < 30 & combi$windspeed >= 15] = '15-30'\ncombi$wind_cat[combi$windspeed < 15] = '15-'\n\ncombi$humidity_cat = '80+'\ncombi$humidity_cat[combi$humidity < 80 & combi$humidity >= 60] = '60-80'\ncombi$humidity_cat[combi$humidity < 60 & combi$humidity >= 40] = '40-60'\ncombi$humidity_cat[combi$humidity < 40 & combi$humidity >= 20] = '20-40'\ncombi$humidity_cat[combi$humidity < 20] = '20-'\n\ncombi$hour_cat = 'night'\ncombi$hour_cat[as.numeric(combi$hour) < 18 & as.numeric(combi$hour) >= 12] = 'afternoon'\ncombi$hour_cat[as.numeric(combi$hour) < 12 & as.numeric(combi$hour) >= 6] = 'morning'\ncombi$hour_cat[as.numeric(combi$hour) < 6] = 'dawn'\n\n\n# Split the sets\ntrain = combi[0:10886,]\ntest = combi[10887:17379,]\n\n\n#\n# Test\n#\n\n# \n\n\n\n\n# Multiple Linear Regression Example http://www.statmethods.net/stats/regression.html\nfit <- lm(count ~ hour_cat, data=train) # 278\nfit <- lm(count ~ weekday, data=train) # 278\n\nfit <- lm(count ~ as.numeric(hour) + I(as.numeric(hour)^2) + I(as.numeric(hour)^3), data=train) \n\nfit <- lm(count ~ as.numeric(month) + I(as.numeric(month)^2), data=train) \n\n\n\nfit <- lm(count ~ hour_cat + humidity_cat + wind_cat + temp_cat, data=train) # 278\n\n# Other useful functions \ncoefficients(fit) # model coefficients\nconfint(fit, level=0.95) # CIs for model parameters \nfitted(fit) # predicted values\nresiduals(fit) # residuals\nanova(fit) # anova table \nvcov(fit) # covariance matrix for model parameters \ninfluence(fit) # regression diagnostics\n\n# diagnostic plots \nlayout(matrix(c(1,2,3,4),2,2)) # optional 4 graphs/page \nplot(fit)\n\n\n#fancyRpartPlot(fit)\n\n#Predict and save file\nprediction <- predict(fit, test, type = \"response\")\nsubmit <- data.frame(datetime = test$datetime, count = prediction)\nwrite.csv(submit, file = \"predictions.csv\", row.names = FALSE)\n\n# Simple linear regression\nxyplot(count ~ hour, data = train,\n       xlab = \"Hour\",\n       ylab = \"Count\",\n       main = \"Count by Hour\"\n)\n\n",
    "created" : 1406693126556.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1239471799",
    "id" : "F88C6F1B",
    "lastKnownWriteTime" : 1409098944,
    "path" : "C:/git/kaggle-repo/bike-sharing-demand/BikeSharingDemand.R",
    "project_path" : "BikeSharingDemand.R",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "source_on_save" : false,
    "type" : "r_source"
}